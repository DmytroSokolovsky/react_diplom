// –Ü–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤ —ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫
import { useCallback, useContext, useEffect, useState } from 'react';
import { UserIdContext } from '../../context/context';
import { registrationAPI } from '../../api/registration-api';
import PatientInfo from './PatientInfo/PatientInfo';
import SpecializationList from './SpecializationList/SpecializationList';
import DoctorList from './DoctorList/DoctorList';
import DateList from './DateList/DateList';
import TimeSlotList from './TimeSlotList/TimeSlotList';
import { useTelegram } from '../../hooks/useTelegram';
import { Toast } from '../common/Toast/Toast'; 
import s from './Registration.module.scss'

function Registration() {
  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è Telegram API
  const { tg, onReady, showMainButton, hideMainButton, setButtonText, setEventMainButtonClicked, removeEventMainButtonClicked, sendDataToTelegram } = useTelegram();

  // –°—Ç–∞–Ω–∏ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
  const [specializations, setSpecializations] = useState([]);
  const [doctors, setDoctors] = useState([]);
  const [selectedSpecialization, setSelectedSpecialization] = useState(null);
  const [selectedDoctor, setSelectedDoctor] = useState(null);
  const [availableDates, setAvailableDates] = useState([]);
  const [selectedDate, setSelectedDate] = useState(null);
  const [availableSlots, setAvailableSlots] = useState([]);
  const [selectedSlot, setSelectedSlot] = useState(null);
  const [patientName, setPatientName] = useState('');
  const [patientPhone, setPatientPhone] = useState('');
  const [isDataEntered, setIsDataEntered] = useState(false);
  const [isFormValid, setIsFormValid] = useState(false); 
  const [errorMessage, setErrorMessage] = useState('');  

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è userId –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  let userId = useContext(UserIdContext);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–∏—Ö
  const onSendData = useCallback(async () => {
    const currentUserId = userId ? Number(userId) : null;

    // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
    const data = {
      doctor: selectedDoctor.name,
      doctor_id: selectedDoctor?.telegram_id,
      specialization: selectedSpecialization,
      date: selectedDate,
      time: selectedSlot,
      user_id: currentUserId,
      patient_name: patientName,
      patient_phone_number: Number(patientPhone),
    };

    // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ª—ñ–∫–∞—Ä—è
    const messageForDoctor =         
  `
  ‚úçÔ∏è –£ –≤–∞—Å –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –Ω–∞ –ø—Ä–∏–π–æ–º:

  üë®‚Äçü¶± –ü–∞—Ü—ñ—î–Ω—Ç: ${data.patient_name}
  üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ${data.patient_phone_number}
  üìÖ –î–∞—Ç–∞: ${data.date}
  ‚è∞ –ß–∞—Å: ${data.time}
  `;

    try {
      // –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É
      await registrationAPI.addRecord(data);

      if (userId) {
        // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–æ Telegram
        sendDataToTelegram(data);
      } else {
        if (data.doctor_id) {
          try {
            // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ª—ñ–∫–∞—Ä—é
            await registrationAPI.sendMessageToDoctor(data.doctor_id, messageForDoctor);
          } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ª—ñ–∫–∞—Ä—é:', error);
          }
        }
        alert('–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –ø—Ä–∏–π–æ–º');
      }
      resetForm();

    } catch (error) {
      if (userId) {
        setErrorMessage('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –Ω–∞ –ø—Ä–∏–π–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É');
      } else {
        alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –Ω–∞ –ø—Ä–∏–π–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É');
      }
      resetForm();
    }
  }, [selectedDoctor, selectedSpecialization, selectedSlot, selectedDate, patientName, patientPhone, userId, sendDataToTelegram]);

  // –°–∫–∏–¥–∞–Ω–Ω—è —Ñ–æ—Ä–º–∏
  const resetForm = () => {
    setDoctors([]);
    setSelectedSpecialization(null);
    setSelectedDoctor(null);
    setAvailableDates([]);
    setSelectedDate(null);
    setAvailableSlots([]);
    setSelectedSlot(null);
    setPatientName('');
    setPatientPhone('');
    setIsDataEntered(false);
    setIsFormValid(false); 
  };

  // –û–±—Ä–æ–±–∫–∞ –≤–≤–æ–¥—É –¥–∞–Ω–∏—Ö –ø–∞—Ü—ñ—î–Ω—Ç–∞
  const handleDataInput = useCallback(() => {
    const phoneRegex = /^380\d{9}$/; 
    if (patientName.trim() !== '' && phoneRegex.test(patientPhone)) {
      setIsFormValid(true);
    } else {
      setIsFormValid(false);
    }
    setIsDataEntered(true);
  }, [patientName, patientPhone]);

  // –í–∏–∫–ª–∏–∫ –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ Telegram
  useEffect(() => {
    onReady();
    setEventMainButtonClicked(onSendData);
    return () => {
      removeEventMainButtonClicked(onSendData);
    };
  }, [onSendData, onReady, tg, setEventMainButtonClicked, removeEventMainButtonClicked]);

  // –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–ª–∞–≤—ñ—à—ñ Enter
  const handleKeyDown = useCallback((event) => {
    if (event.key === 'Enter') {
      if (userId && selectedSlot && isFormValid) {
        onSendData(); 
      }
    }
  }, [onSendData, isFormValid, selectedSlot, userId]);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ–π –ª—ñ–∫–∞—Ä—ñ–≤
  useEffect(() => {
    onReady();
    registrationAPI.getSpecializations().then(setSpecializations).catch(error => {
      setErrorMessage('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ–π –ª—ñ–∫–∞—Ä—ñ–≤');
    });
  }, [tg, onReady]);

  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
  useEffect(() => {
    setButtonText('–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è');
  }, [tg, setButtonText]);

  // –ü–æ–∫–∞–∑/—Å—Ö–æ–≤—É–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ—ó –∫–Ω–æ–ø–∫–∏
  useEffect(() => {
    if (selectedSlot && isFormValid) {
      showMainButton();
    } else {
      hideMainButton();
    }
  }, [selectedSlot, showMainButton, hideMainButton, isFormValid]);

  // –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
  const handleClickSpecialization = (specialization) => {
    if (isDataEntered) {
      setSelectedSpecialization(specialization);
      setSelectedDoctor(null);
      setAvailableDates([]);
      setSelectedDate(null);
      setSelectedSlot(null);
      registrationAPI.getDoctors(specialization).then(setDoctors).catch(error => {
        setErrorMessage('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ª—ñ–∫–∞—Ä—ñ–≤ –∑–∞ —Ü—ñ—î—é —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—î—é');
      });
    }
  };

  // –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ª—ñ–∫–∞—Ä—è
  const handleClickDoctor = (doctor) => {
    setSelectedDoctor(doctor);
    setSelectedDate(null);
    setSelectedSlot(null);
    registrationAPI.getSchedule(doctor._id).then(response => {
      const availableDates = response.filter(day => day.time_slots.some(slot => slot.is_available));
      setAvailableDates(availableDates);
    }).catch(error => {
      setErrorMessage('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É –ª—ñ–∫–∞—Ä—è');
    });
  };

  // –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏
  const handleSelectDate = (date) => {
    setSelectedDate(date);
    setSelectedSlot(null);
    const selectedDay = availableDates.find(day => day.day === date);
    if (selectedDay) {
      const availableSlots = selectedDay.time_slots.filter(slot => slot.is_available);
      setAvailableSlots(availableSlots);
    }
  };

  // –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Å–ª–æ—Ç—É
  const handleSelectSlot = (slot) => {
    setSelectedSlot(slot);
  };

  // –ü–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
  useEffect(() => {
    if (errorMessage) {
      const timer = setTimeout(() => {
        setErrorMessage(''); 
      }, 3000);
      return () => clearTimeout(timer);
    }
  }, [errorMessage]);

  return (
    <div className={s.registration} onKeyDown={handleKeyDown}>
      <PatientInfo
        patientName={patientName}
        setPatientName={setPatientName}
        patientPhone={patientPhone}
        setPatientPhone={setPatientPhone}
        handleDataInput={handleDataInput}
      />
      <SpecializationList
        specializations={specializations}
        handleClickSpecialization={handleClickSpecialization}
      />
      {selectedSpecialization && (
        <DoctorList
          doctors={doctors}
          handleClickDoctor={handleClickDoctor}
          selectedSpecialization={selectedSpecialization}
        />
      )}
      {availableDates.length > 0 && selectedDoctor && (
        <DateList
          availableDates={availableDates}
          handleSelectDate={handleSelectDate}
          selectedDoctor={selectedDoctor}
        />
      )}
      {availableSlots.length > 0 && selectedDate && (
        <TimeSlotList
          availableSlots={availableSlots}
          handleSelectSlot={handleSelectSlot}
          selectedDate={selectedDate}
        />
      )}
      {!userId && selectedSlot && isFormValid &&             
        <button
          className={s.registration__button}
          type="button"
          onClick={onSendData}
          aria-label="–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–∏–π–æ–º"
          disabled={!isFormValid}
        >
          –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è
        </button>
      }
      {errorMessage && <Toast message={errorMessage} />}
    </div>
  );
}

export default Registration;
