{"version":3,"file":"static/js/118.0e899aa1.chunk.js","mappings":"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","sources":["api/api.js","api/doctors-api.js","webpack://ui/./src/components/Doctors/Doctors/Doctors.module.scss?b1ca","components/Doctors/Doctors/Doctors.jsx","webpack://ui/./src/components/common/Toast/Toast.module.scss?a9e2","components/common/Toast/Toast.jsx"],"sourcesContent":["// Імпортується бібліотека axios для роботи з HTTP запитами\r\nimport axios from \"axios\";\r\n\r\n// Створюється новий екземпляр axios з базовою URL адресою\r\nexport const instance = axios.create({\r\n  baseURL: 'https://api-diplom-eupy.onrender.com/api/' \r\n});\r\n","import { instance } from \"./api\"; // Імпортується налаштований екземпляр axios для API запитів\r\n\r\n// Об'єкт doctorsAPI, що містить методи для роботи з лікарями\r\nexport const doctorsAPI = {\r\n  // Метод для отримання списку всіх лікарів\r\n  getAll() {\r\n    return instance\r\n      .get(`doctors`) \r\n      .then(response => response.data); \r\n  },\r\n  // Метод для отримання інформації про одного лікаря за Telegram ID\r\n  getOne(telegramId) {\r\n    return instance\r\n      .get(`doctor/${telegramId}`)\r\n      .then(response => response.data);\r\n  }\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"doctors\":\"Doctors_doctors__IDzzq\",\"doctors__header\":\"Doctors_doctors__header__hyTD0\",\"doctors__text\":\"Doctors_doctors__text__Xnzl6\",\"doctors__photo\":\"Doctors_doctors__photo__v+RSC\",\"block\":\"Doctors_block__S1ViF\",\"block__specialization\":\"Doctors_block__specialization__MAg-6\",\"block__items\":\"Doctors_block__items__idOUD\",\"item\":\"Doctors_item__+uawA\",\"item__photo\":\"Doctors_item__photo__oqLJq\",\"item__name\":\"Doctors_item__name__lj8jG\"};","// Імпорт необхідних модулів і бібліотек\r\nimport { Fragment, useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Toast } from \"../../common/Toast/Toast\";\r\nimport { doctorsAPI } from \"../../../api/doctors-api\";\r\nimport Avatar from '../../../images/avatar.png';\r\nimport DoctorsImage from '../../../images/doctors.jpg';\r\nimport s from './Doctors.module.scss';\r\nimport cn from 'classnames';\r\n\r\n// Компонент для відображення лікарів за спеціалізаціями\r\nconst Doctors = () => {\r\n  // Стан для лікарів і повідомлення про помилку\r\n  const [doctorsBySpecialization, setDoctorsBySpecialization] = useState({});\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    // Завантаження даних лікарів з API\r\n    async function getDoctors() {\r\n      try {\r\n        const data = await doctorsAPI.getAll();\r\n\r\n        // Групування лікарів за спеціалізаціями\r\n        const groupedDoctors = data.reduce((acc, doctor) => {\r\n          const specialization = doctor.specialization || \"Нема спеціалізації\";\r\n          if (!acc[specialization]) {\r\n            acc[specialization] = [];\r\n          }\r\n          acc[specialization].push(doctor);\r\n          return acc;\r\n        }, {});\r\n\r\n        setDoctorsBySpecialization(groupedDoctors);\r\n      } catch (error) {\r\n        setErrorMessage(\"Неможливо завантажити інформацію про лікарів\");\r\n      }\r\n    }\r\n\r\n    getDoctors();\r\n  }, []);\r\n\r\n  // Динамічні класи для блоків спеціалізацій\r\n  let blockClass = cn(s.doctors__block, s.block);\r\n\r\n  return (\r\n    <div className={s.doctors}>\r\n      {/* Заголовок і опис команди лікарів */}\r\n      <div className={s.doctors__header}>\r\n        <h1 className={s.doctors__text} aria-label=\"Опис команди лікарів Amel Smart Clinic\" tabIndex={0}>\r\n          Сьогодні стоматологія є однією з найбільш високотехнологічних галузей. Тому команда Amel Smart складається з прогресивних фахівців, які володіють найостаннішими технологіями та навичками роботи на цифровому обладнанні. Наші лікарі працюють за сучасними міжнародними протоколами, мають профільну освіту, систематично проходять курси підвищення кваліфікації, беруть участь в міжнародних конгресах. На базі клініки регулярно проходять семінари з залученням кращих світових фахівців стоматології. Наші клієнти завжди можуть отримати професійну пораду і підтримку. Для себе і всієї своєї родини.\r\n        </h1>\r\n        <div className={s.doctors__photo} role=\"img\" aria-label=\"Фотографія лікарів клініки\" tabIndex={0}>\r\n          <img src={DoctorsImage} alt=\"Фотографія всіх лікарів нашої клініки\" />\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Список лікарів за спеціалізаціями */}\r\n      <div className={s.doctors__bottom}>\r\n        {Object.keys(doctorsBySpecialization).map((specialization) => (\r\n          <section key={specialization} className={blockClass} aria-labelledby={`Заголовок-${specialization}`}>\r\n            <h2 id={`Заголовок-${specialization}`} className={s.block__specialization} tabIndex={0}>{specialization}</h2>\r\n            <ul className={s.block__items}>\r\n              {/* Список лікарів конкретної спеціалізації */}\r\n              {doctorsBySpecialization[specialization].map((doctor) => (\r\n                <Fragment key={doctor?.telegram_id}>\r\n                  <li className={s.item}>\r\n                    <Link tabIndex={0} to={`/doctors/${doctor?.telegram_id}`} className={s.item__link} aria-label={`Лікар ${doctor?.name}, спеціалізація: ${specialization}`}>\r\n                      <div className={s.item__photo} aria-hidden=\"true\">\r\n                          <img\r\n                            src={doctor?.photo || Avatar}\r\n                            alt={`Фото лікаря ${doctor?.name}`}\r\n                          />\r\n                      </div>\r\n                      <h3 className={s.item__name}>{doctor?.name}</h3>\r\n                    </Link>\r\n                  </li>\r\n                </Fragment>\r\n              ))}\r\n            </ul>\r\n          </section>\r\n        ))}\r\n      </div>\r\n      \r\n      {/* Компонент для відображення помилок */}\r\n      {errorMessage && <Toast errorMessage={errorMessage} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Doctors;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"toast\":\"Toast_toast__RH58L\",\"open\":\"Toast_open__B2TW5\"};","// Імпорт необхідних модулів і бібліотек\r\nimport { useEffect, useState } from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport cn from 'classnames';\r\nimport s from './Toast.module.scss';\r\n\r\n// Компонент для відображення спливаючого повідомлення Toast\r\nexport const Toast = ({ errorMessage }) => {\r\n  // Стан для зберігання часу у секундах\r\n  const [seconds, setSeconds] = useState(0);\r\n\r\n  // Базовий клас для Toast\r\n  let toastClass = cn(s.toast);\r\n\r\n  // Додаємо клас відкритого стану, якщо seconds більше 0\r\n  if (seconds > 0) {\r\n    toastClass = cn(s.toast, {\r\n      [s.open]: true, // Додається клас для відкритого стану\r\n    });\r\n  }\r\n\r\n  // Закриваємо Toast, якщо seconds досягає 2.7\r\n  if (seconds >= 2.7) {\r\n    toastClass = cn(s.toast, {\r\n      [s.open]: false, // Клас для закритого стану\r\n    });\r\n  }\r\n\r\n  // Використовуємо useEffect для оновлення seconds кожні 300 мілісекунд\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setSeconds(prevSeconds => prevSeconds + 0.3); // Додаємо 0.3 кожні 300 мс\r\n    }, 300);\r\n\r\n    // Зупиняємо інтервал при розмонтуванні компонента\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [setSeconds]);\r\n\r\n  // Якщо seconds досягне 3, повертаємо null, щоб не відображати Toast\r\n  if (seconds >= 3) return null;\r\n\r\n  // Повертаємо портал з Toast повідомленням, яке з'являється в document.body\r\n  return createPortal(\r\n    <div className={toastClass}>\r\n      <span>{errorMessage}</span>\r\n    </div>,\r\n    document.body,\r\n  );\r\n};\r\n"],"names":["instance","axios","create","baseURL","doctorsAPI","getAll","get","then","response","data","getOne","telegramId","Doctors","doctorsBySpecialization","setDoctorsBySpecialization","useState","errorMessage","setErrorMessage","useEffect","async","groupedDoctors","reduce","acc","doctor","specialization","push","error","getDoctors","blockClass","cn","s","doctors__block","block","_jsxs","className","doctors","children","doctors__header","_jsx","doctors__text","tabIndex","doctors__photo","role","src","DoctorsImage","alt","doctors__bottom","Object","keys","map","id","block__specialization","block__items","Fragment","item","Link","to","telegram_id","item__link","name","item__photo","photo","Avatar","item__name","Toast","_ref","seconds","setSeconds","toastClass","interval","setInterval","prevSeconds","clearInterval","createPortal","document","body"],"sourceRoot":""}