{"version":3,"file":"static/js/277.5eee89b6.chunk.js","mappings":"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","sources":["api/api.js","webpack://ui/./src/components/Modal/Modal.module.scss?b72d","components/Modal/Modal.jsx","webpack://ui/./src/components/Records/RecordItem/RecordItem.module.scss?abff","components/Records/RecordItem/RecordItem.jsx","webpack://ui/./src/components/Records/RecordList/RecordList.module.scss?283d","components/Records/RecordList/RecordList.jsx","api/records-api.js","components/Records/Records.jsx","webpack://ui/./src/components/common/Toast/Toast.module.scss?a9e2","components/common/Toast/Toast.jsx"],"sourcesContent":["// Імпортується бібліотека axios для роботи з HTTP запитами\r\nimport axios from \"axios\";\r\n\r\n// Створюється новий екземпляр axios з базовою URL адресою\r\nexport const instance = axios.create({\r\n  baseURL: 'https://api-diplom-eupy.onrender.com/api/' \r\n});\r\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"Modal_modal__GYX1Z\",\"modal__container\":\"Modal_modal__container__c+3RE\",\"modal__title\":\"Modal_modal__title__+Y9C8\",\"modal__buttons\":\"Modal_modal__buttons__9UWYR\",\"modal__button\":\"Modal_modal__button__1NCkg\"};","// Імпорт необхідних модулів і бібліотек\r\nimport { createPortal } from 'react-dom';\r\nimport { useCallback, useEffect, useRef } from 'react';\r\nimport s from './Modal.module.scss';\r\n\r\n// Компонент Modal приймає пропси onConfirm, onCancel та record\r\nconst Modal = ({ onConfirm, onCancel, record }) => {\r\n  // Створюються рефери для модального вікна та кнопок\r\n  const modalRef = useRef(null);\r\n  const firstButtonRef = useRef(null);\r\n  const lastButtonRef = useRef(null);\r\n\r\n  // Обробник подій для клавіатури\r\n  const handleKeyDown = useCallback((event) => {\r\n    // Закривається модальне вікно при натисканні Esc\r\n    if (event.key === 'Escape') {\r\n      onCancel();\r\n    }\r\n\r\n    // Обробка навігації між кнопками за допомогою клавіші Tab\r\n    if (event.key === 'Tab') {\r\n      const focusableElements = modalRef.current.querySelectorAll('button');\r\n      const firstElement = focusableElements[0];\r\n      const lastElement = focusableElements[focusableElements.length - 1];\r\n\r\n      // Якщо натиснута Shift + Tab, фокус переноситься на останню кнопку\r\n      if (event.shiftKey) { \r\n        if (document.activeElement === firstElement) {\r\n          event.preventDefault();\r\n          lastElement.focus();\r\n        }\r\n      } else { \r\n        // Якщо натиснута просто Tab, фокус переноситься на першу кнопку\r\n        if (document.activeElement === lastElement) {\r\n          event.preventDefault();\r\n          firstElement.focus(); \r\n        }\r\n      }\r\n    }\r\n  }, [onCancel]); // Додайте залежності, якщо потрібно\r\n\r\n  // Використання useEffect для підписки на події клавіатури\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    // Фокус на першій кнопці при відкритті модального вікна\r\n    firstButtonRef.current.focus(); \r\n    return () => {\r\n      // Відписка від подій клавіатури при розмонтуванні компонента\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [handleKeyDown]);\r\n\r\n  return createPortal(\r\n    // Створюється портал для модального вікна\r\n    <div className={s.modal} role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-title\" aria-describedby=\"modal-description\">\r\n      <div className={s.modal__container} ref={modalRef}>\r\n        <div className={s.modal__body}>\r\n          {/* Заголовок модального вікна з запитом на підтвердження */}\r\n          <div id=\"modal-title\" className={s.modal__title}>Ви дійсно бажаєте видалити запис до лікаря {record?.doctor} на {record?.date} о {record?.time}?</div>\r\n          <div id=\"modal-description\" className={s.modal__buttons}>\r\n            {/* Кнопка підтвердження видалення */}\r\n            <button\r\n              className={s.modal__button}\r\n              onClick={onConfirm}\r\n              aria-label=\"Підтвердити видалення запису\"\r\n              ref={firstButtonRef}\r\n            >\r\n              Так\r\n            </button>\r\n            {/* Кнопка скасування видалення */}\r\n            <button\r\n              className={s.modal__button}\r\n              onClick={onCancel}\r\n              aria-label=\"Скасувати видалення запису\"\r\n              ref={lastButtonRef} \r\n            >\r\n              Ні\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>,\r\n    document.body,\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"record\":\"RecordItem_record__1bx+W\",\"record__delete\":\"RecordItem_record__delete__tVIVl\"};","// Імпорт необхідних модулів і бібліотек\r\nimport s from './RecordItem.module.scss';\r\n\r\n// Компонент RecordItem для відображення інформації про запис\r\nfunction RecordItem({ record, onDelete }) {\r\n  return (\r\n    <div className={s.record} role=\"article\" aria-labelledby={`record-${record._id}`}>\r\n      {/* Відображення лікаря */}\r\n      <p tabIndex={0}><span>Лікар:</span> {record.doctor}</p>\r\n      {/* Відображення дати */}\r\n      <p tabIndex={0}><span>Дата:</span> {record.date}</p>\r\n      {/* Відображення часу */}\r\n      <p tabIndex={0}><span>Час:</span> {record.time}</p>\r\n      {/* Кнопка для видалення запису */}\r\n      <button \r\n        className={s.record__delete} \r\n        onClick={() => onDelete(record)} \r\n        aria-label={`Видалити запис до лікаря ${record.doctor} на ${record.date} о ${record.time}`}\r\n      >\r\n        Видалити запис\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RecordItem;\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"records\":\"RecordList_records__Cd2hk\",\"records__title\":\"RecordList_records__title__4niOz\",\"records__no\":\"RecordList_records__no__hZbML\"};","// Імпорт необхідних модулів і бібліотек\r\nimport RecordItem from '../RecordItem/RecordItem';\r\nimport s from './RecordList.module.scss';\r\n\r\n// Компонент RecordList для відображення списку записів\r\nfunction RecordList({ records, onDelete, errorMessage }) {\r\n  // Якщо є повідомлення про помилку, повертається null (нічого не відображається)\r\n  if (errorMessage) {\r\n    return null; \r\n  }\r\n\r\n  return (\r\n    <div className={s.records} role=\"region\" aria-labelledby=\"records-title\">\r\n      {/* Заголовок списку записів */}\r\n      <h2 tabIndex={0} id=\"records-title\" className={s.records__title}>Ваші записи</h2>\r\n      <div className={s.records__list} role=\"list\">\r\n        {records.length > 0 ? (\r\n          // Відображення списку записів\r\n          records.map(record => (\r\n            <div role=\"listitem\" key={record._id}>\r\n              <RecordItem record={record} onDelete={onDelete} />\r\n            </div>\r\n          ))\r\n        ) : (\r\n          // Повідомлення про відсутність записів\r\n          <p className={s.records__no} role=\"alert\">Записи відсутні</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RecordList;\r\n","// Імпортується налаштований екземпляр axios для API запитів\r\nimport { instance } from \"./api\";\r\n\r\n// Об'єкт recordsAPI, що містить методи для роботи з записами\r\nexport const recordsAPI = {\r\n  // Метод для отримання запису за ID\r\n  get(recordId) {\r\n    return instance\r\n      .get(`records/${recordId}`) \r\n      .then(response => response.data);\r\n  },\r\n  // Метод для видалення запису за ID\r\n  delete(recordId) {\r\n    return instance\r\n      .delete(`records/${recordId}`) \r\n      .then(response => response.data);\r\n  }\r\n};\r\n","// Імпорт необхідних модулів і бібліотек\r\nimport { useContext, useEffect, useState, useCallback } from 'react';\r\nimport { UserIdContext } from '../../context/context';\r\nimport Modal from './../Modal/Modal';\r\nimport RecordList from './RecordList/RecordList';\r\nimport { recordsAPI } from '../../api/records-api';\r\nimport { useTelegram } from '../../hooks/useTelegram';\r\nimport { Toast } from '../common/Toast/Toast';\r\n\r\n// Компонент Records для управління записами\r\nfunction Records() {\r\n  // Отримання функцій та об'єктів з контексту Telegram\r\n  const { tg, onReady, sendDataToTelegram } = useTelegram();\r\n\r\n  // Стан для записів, відкриття модального вікна та повідомлень про помилки\r\n  const [records, setRecords] = useState([]);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [recordToDelete, setRecordToDelete] = useState(null);\r\n  const [recordsErrorMessage, setRecordsErrorMessage] = useState('');\r\n  const [deleteErrorMessage, setDeleteErrorMessage] = useState(''); \r\n\r\n  // Отримання userId з контексту\r\n  const userId = useContext(UserIdContext);\r\n\r\n  // Виклик функції для отримання записів\r\n  useEffect(() => {\r\n    async function getRecords(userId) {\r\n      try {\r\n        const data = await recordsAPI.get(userId);\r\n        setRecords(data); // Збереження отриманих записів у стані\r\n      } catch (error) {\r\n        setRecordsErrorMessage('Неможливо завантажити ваші записи'); // Повідомлення про помилку\r\n      }\r\n    }\r\n\r\n    if (userId) {\r\n      getRecords(userId); // Отримання записів при наявності userId\r\n    }\r\n  }, [userId]);\r\n\r\n  // Виклик onReady при монтуванні компонента\r\n  useEffect(() => {\r\n    onReady();\r\n  }, [onReady]);\r\n\r\n  // Функція для видалення запису\r\n  const handleDelete = useCallback(\r\n    async (record) => {\r\n      const { _id, doctor, doctor_id, specialization, date, time, patient_name, patient_phone_number } = record;\r\n      const data = {\r\n        deletedDoctorTelegramId: doctor_id,\r\n        deletedDoctor: doctor,\r\n        deletedSpecialization: specialization,\r\n        deletedPatientName: patient_name,\r\n        deletedPatientPhoneNumber: patient_phone_number,\r\n        deletedRecordDate: date,\r\n        deletedRecordTime: time,\r\n      };\r\n\r\n      try {\r\n        await recordsAPI.delete(_id); // Видалення запису з API\r\n        setRecords((prevRecords) => prevRecords.filter((rec) => rec._id !== _id)); // Оновлення списку записів\r\n        if (tg) {\r\n          sendDataToTelegram(data); // Відправка даних до Telegram\r\n        }\r\n        closeModal(); // Закриття модального вікна\r\n      } catch (error) {\r\n        setDeleteErrorMessage('Не вдалося видалити запис'); // Повідомлення про помилку видалення\r\n      }\r\n    },\r\n    [sendDataToTelegram, tg]\r\n  );\r\n\r\n  // Виклик таймера для закриття повідомлення про помилку\r\n  useEffect(() => {\r\n    if (deleteErrorMessage) {\r\n      const timer = setTimeout(() => {\r\n        setDeleteErrorMessage(''); // Скидання повідомлення про помилку\r\n      }, 3000); \r\n\r\n      return () => clearTimeout(timer); // Очистка таймера\r\n    }\r\n  }, [deleteErrorMessage]);\r\n\r\n  // Відкриття модального вікна для підтвердження видалення\r\n  const openModal = (record) => {\r\n    setRecordToDelete(record); // Збереження запису, який потрібно видалити\r\n    setIsOpen(true); // Відкриття модального вікна\r\n  };\r\n\r\n  // Закриття модального вікна\r\n  const closeModal = () => {\r\n    setRecordToDelete(null); // Скидання запису\r\n    setIsOpen(false); // Закриття модального вікна\r\n  };\r\n\r\n  // Підтвердження видалення запису\r\n  const confirmDelete = () => {\r\n    if (recordToDelete) {\r\n      handleDelete(recordToDelete); // Виклик функції видалення\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* Список записів з можливістю видалення */}\r\n      <RecordList records={records} onDelete={openModal} errorMessage={recordsErrorMessage} />\r\n      {/* Модальне вікно для підтвердження видалення */}\r\n      {isOpen && <Modal onConfirm={confirmDelete} onCancel={closeModal} record={recordToDelete}/>}\r\n      {/* Повідомлення про помилки */}\r\n      {recordsErrorMessage && <Toast errorMessage={recordsErrorMessage} />}\r\n      {deleteErrorMessage && <Toast errorMessage={deleteErrorMessage} />} \r\n    </>\r\n  );\r\n}\r\n\r\nexport default Records;\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"toast\":\"Toast_toast__RH58L\",\"open\":\"Toast_open__B2TW5\"};","// Імпорт необхідних модулів і бібліотек\r\nimport { useEffect, useState } from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport cn from 'classnames';\r\nimport s from './Toast.module.scss';\r\n\r\n// Компонент для відображення спливаючого повідомлення Toast\r\nexport const Toast = ({ errorMessage }) => {\r\n  // Стан для зберігання часу у секундах\r\n  const [seconds, setSeconds] = useState(0);\r\n\r\n  // Базовий клас для Toast\r\n  let toastClass = cn(s.toast);\r\n\r\n  // Додаємо клас відкритого стану, якщо seconds більше 0\r\n  if (seconds > 0) {\r\n    toastClass = cn(s.toast, {\r\n      [s.open]: true, // Додається клас для відкритого стану\r\n    });\r\n  }\r\n\r\n  // Закриваємо Toast, якщо seconds досягає 2.7\r\n  if (seconds >= 2.7) {\r\n    toastClass = cn(s.toast, {\r\n      [s.open]: false, // Клас для закритого стану\r\n    });\r\n  }\r\n\r\n  // Використовуємо useEffect для оновлення seconds кожні 300 мілісекунд\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setSeconds(prevSeconds => prevSeconds + 0.3); // Додаємо 0.3 кожні 300 мс\r\n    }, 300);\r\n\r\n    // Зупиняємо інтервал при розмонтуванні компонента\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [setSeconds]);\r\n\r\n  // Якщо seconds досягне 3, повертаємо null, щоб не відображати Toast\r\n  if (seconds >= 3) return null;\r\n\r\n  // Повертаємо портал з Toast повідомленням, яке з'являється в document.body\r\n  return createPortal(\r\n    <div className={toastClass}>\r\n      <span>{errorMessage}</span>\r\n    </div>,\r\n    document.body,\r\n  );\r\n};\r\n"],"names":["instance","axios","create","baseURL","_ref","onConfirm","onCancel","record","modalRef","useRef","firstButtonRef","lastButtonRef","handleKeyDown","useCallback","event","key","focusableElements","current","querySelectorAll","firstElement","lastElement","length","shiftKey","document","activeElement","preventDefault","focus","useEffect","window","addEventListener","removeEventListener","createPortal","_jsx","className","s","modal","role","children","modal__container","ref","_jsxs","modal__body","id","modal__title","doctor","date","time","modal__buttons","modal__button","onClick","body","onDelete","_id","tabIndex","records","errorMessage","records__title","records__list","map","RecordItem","records__no","recordsAPI","get","recordId","then","response","data","delete","tg","onReady","sendDataToTelegram","useTelegram","setRecords","useState","isOpen","setIsOpen","recordToDelete","setRecordToDelete","recordsErrorMessage","setRecordsErrorMessage","deleteErrorMessage","setDeleteErrorMessage","userId","useContext","UserIdContext","async","error","getRecords","handleDelete","doctor_id","specialization","patient_name","patient_phone_number","deletedDoctorTelegramId","deletedDoctor","deletedSpecialization","deletedPatientName","deletedPatientPhoneNumber","deletedRecordDate","deletedRecordTime","prevRecords","filter","rec","closeModal","timer","setTimeout","clearTimeout","_Fragment","RecordList","Modal","confirmDelete","Toast","seconds","setSeconds","toastClass","cn","interval","setInterval","prevSeconds","clearInterval"],"sourceRoot":""}