{"version":3,"file":"static/js/41.d64cfc67.chunk.js","mappings":"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","sources":["api/api.js","api/registration-api.js","webpack://ui/./src/components/Registration/PatientInfo/PatientInfo.module.scss?0586","components/Registration/PatientInfo/PatientInfo.jsx","webpack://ui/./src/components/Registration/SpecializationList/SpecializationList.module.scss?ea99","components/Registration/SpecializationList/SpecializationList.jsx","webpack://ui/./src/components/Registration/DoctorList/DoctorList.module.scss?b99a","components/Registration/DoctorList/DoctorList.jsx","webpack://ui/./src/components/Registration/DateList/DateList.module.scss?ed81","components/Registration/DateList/DateList.jsx","webpack://ui/./src/components/Registration/TimeSlotList/TimeSlotList.module.scss?33f7","components/Registration/TimeSlotList/TimeSlotList.jsx","webpack://ui/./src/components/Registration/Registration.module.scss?ed51","components/Registration/Registration.jsx","webpack://ui/./src/components/common/Toast/Toast.module.scss?a9e2","components/common/Toast/Toast.jsx"],"sourcesContent":["// Імпортується бібліотека axios для роботи з HTTP запитами\r\nimport axios from \"axios\";\r\n\r\n// Створюється новий екземпляр axios з базовою URL адресою\r\nexport const instance = axios.create({\r\n  baseURL: 'https://api-diplom-eupy.onrender.com/api/' \r\n});\r\n","import axios from \"axios\"; // Імпортується бібліотека axios для роботи з HTTP запитами\r\nimport { instance } from \"./api\"; // Імпортується налаштований екземпляр axios для API запитів\r\n\r\n// Токен бота Telegram для доступу до API\r\nconst TELEGRAM_BOT_TOKEN = '7528553042:AAH--t6VitbS4Su4pDKKsODm1UWkzqnQdMo';\r\n// URL для надсилання повідомлень через Telegram API\r\nconst TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;\r\n\r\n// Об'єкт registrationAPI, що містить методи для реєстрації та роботи з лікарями\r\nexport const registrationAPI = {\r\n  // Метод для додавання нового запису\r\n  addRecord(data) {\r\n    return instance\r\n      .post(`records`, data) \r\n      .then(response => response.data); \r\n  },\r\n\r\n  // Метод для надсилання повідомлення лікарю\r\n  sendMessageToDoctor(chat_id, text) {\r\n    return axios.post(TELEGRAM_API_URL, { \r\n      chat_id,\r\n      text \r\n    });\r\n  },\r\n\r\n  // Метод для отримання всіх спеціалізацій лікарів\r\n  getSpecializations() {\r\n    return instance\r\n      .get(`doctors/specializations/all`) \r\n      .then(response => response.data); \r\n  },\r\n\r\n  // Метод для отримання лікарів за спеціалізацією\r\n  getDoctors(specialization) {\r\n    return instance\r\n      .get(`doctors/${specialization}`) \r\n      .then(response => response.data); \r\n  },\r\n\r\n  // Метод для отримання графіка лікаря за ID\r\n  getSchedule(doctorId) {\r\n    return instance\r\n      .get(`doctor/${doctorId}/schedule`) \r\n      .then(response => response.data); \r\n  },\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"info__title\":\"PatientInfo_info__title__aPGKO\",\"info__block\":\"PatientInfo_info__block__szHwK\",\"browser\":\"PatientInfo_browser__NlEsI\"};","// Імпорт необхідних модулів і бібліотек\r\nimport { useCallback, useContext, useEffect, useState } from 'react';\r\nimport s from './PatientInfo.module.scss';\r\nimport cn from 'classnames';\r\nimport { UserIdContext } from '../../../context/context';\r\n\r\n// Компонент PatientInfo для збору інформації про пацієнта\r\nfunction PatientInfo({ patientName, setPatientName, patientPhone, setPatientPhone, handleDataInput }) {\r\n  const [isNameValid, setIsNameValid] = useState(true); // Стан для перевірки валідності імені\r\n  const [isPhoneValid, setIsPhoneValid] = useState(true); // Стан для перевірки валідності телефону\r\n\r\n  const userId = useContext(UserIdContext); // Отримання userId з контексту\r\n\r\n  // Функція для валідації імені\r\n  const validateName = useCallback(() => {\r\n    setIsNameValid(patientName.trim() !== ''); // Перевірка, що ім'я не пусте\r\n  }, [patientName]);\r\n\r\n  // Функція для валідації телефону\r\n  const validatePhone = useCallback(() => {\r\n    const phoneRegex = /^380\\d{9}$/; // Регулярний вираз для українського номера телефону\r\n    setIsPhoneValid(phoneRegex.test(patientPhone)); // Встановлення валідності телефону\r\n  }, [patientPhone]);\r\n\r\n  // Виконання валідацій при зміні імені або телефону\r\n  useEffect(() => {\r\n    validateName();\r\n    validatePhone();\r\n    handleDataInput(); // Виклик функції для обробки введених даних\r\n  }, [patientName, patientPhone, handleDataInput, validateName, validatePhone]);\r\n\r\n  // Обробка зміни імені\r\n  const handleChangeName = (e) => {\r\n    setPatientName(e.target.value); // Оновлення стану імені\r\n  };\r\n\r\n  // Обробка зміни телефону\r\n  const handleChangePhone = (e) => {\r\n    setPatientPhone(e.target.value); // Оновлення стану телефону\r\n  };\r\n\r\n  // Класи для блока інформації\r\n  const blockClass = cn(s.info__block, {\r\n    [s.browser]: !userId, // Додається клас, якщо userId відсутній\r\n  });\r\n\r\n  return (\r\n    <div className={s.info}>\r\n      <h1 tabIndex={0} className={s.info__title}>Запис</h1>\r\n      <div className={blockClass}>\r\n        <label>\r\n          <span>ПІБ:</span>\r\n          <input\r\n            placeholder=\"ПІБ\"\r\n            type=\"text\"\r\n            value={patientName}\r\n            onChange={handleChangeName} // Обробка зміни імені\r\n            onBlur={validateName} // Валідація при втраті фокусу\r\n            required\r\n            aria-invalid={!isNameValid} // Додаткова інформація про валідність\r\n            aria-describedby=\"name-error\" // Вказує на елемент з описом помилки\r\n          />\r\n          {!isNameValid && <p id=\"name-error\" className={s.error} tabIndex={0}>Поле обов'язкове до заповнення</p>}\r\n        </label>\r\n      </div>\r\n      <div className={blockClass}>\r\n        <label>\r\n          <span>Номер телефону:</span>\r\n          <input\r\n            placeholder=\"Номер телефону\"\r\n            type=\"tel\"\r\n            value={patientPhone}\r\n            onChange={handleChangePhone} // Обробка зміни телефону\r\n            onBlur={validatePhone} // Валідація при втраті фокусу\r\n            required\r\n            aria-invalid={!isPhoneValid} // Додаткова інформація про валідність\r\n            aria-describedby=\"phone-error\" // Вказує на елемент з описом помилки\r\n          />\r\n          {!isPhoneValid && <p id=\"phone-error\" className={s.error} tabIndex={0}>Формат повинен бути 380 ХХ ХХХХХХХ</p>}\r\n        </label>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PatientInfo;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"specialization\":\"SpecializationList_specialization__HgJTZ\",\"specialization__title\":\"SpecializationList_specialization__title__+zARi\",\"specialization__list\":\"SpecializationList_specialization__list__HvYH5\",\"specialization__item\":\"SpecializationList_specialization__item__-b1zE\",\"browser\":\"SpecializationList_browser__br7Oa\",\"browser_active\":\"SpecializationList_browser_active__nyRx5\",\"specialization__item_active\":\"SpecializationList_specialization__item_active__+iQ9e\"};","// Імпорт необхідних модулів і бібліотек\r\nimport { useContext, useState } from 'react';\r\nimport cn from 'classnames';\r\nimport s from './SpecializationList.module.scss';\r\nimport { UserIdContext } from '../../../context/context';\r\n\r\n// Компонент SpecializationList для вибору спеціалізації\r\nfunction SpecializationList({ specializations, handleClickSpecialization }) {\r\n  const [activeSpecialization, setActiveSpecialization] = useState(null); // Стан для збереження активної спеціалізації\r\n  const userId = useContext(UserIdContext); // Отримання userId з контексту\r\n\r\n  // Функція для обробки вибору спеціалізації\r\n  const onClickSpecialization = (specialization) => {\r\n    setActiveSpecialization(specialization); // Оновлення активної спеціалізації\r\n    handleClickSpecialization(specialization); // Виклик функції для обробки вибору\r\n  };\r\n\r\n  // Класи для елемента списку спеціалізацій\r\n  const itemClass = cn(s.specialization__item, {\r\n    [s.browser]: !userId, // Додаток класу, якщо userId відсутній\r\n  });\r\n\r\n  return (\r\n    <div className={s.specialization}>\r\n      <h2 tabIndex={0} className={s.specialization__title}>Оберіть спеціалізацію:</h2>\r\n      <ul className={s.specialization__list}>\r\n        {specializations.map((specialization) => (\r\n          <li\r\n            key={specialization}\r\n            onClick={() => onClickSpecialization(specialization)} // Обробка кліку\r\n            onKeyDown={(e) => {\r\n              if (e.key === 'Enter' || e.key === ' ') {\r\n                e.preventDefault(); // Запобігання стандартної поведінки\r\n                onClickSpecialization(specialization); // Обробка клавіатурного вводу\r\n              }\r\n            }}\r\n            tabIndex={0} \r\n            role=\"button\" \r\n            className={cn(itemClass, {\r\n              [s.specialization__item_active]: specialization === activeSpecialization, // Додаток класу для активної спеціалізації\r\n              [s.browser_active]: specialization === activeSpecialization,\r\n            })}\r\n            aria-pressed={specialization === activeSpecialization} // Додаткова інформація про активність\r\n            aria-label={`Оберіть спеціалізацію ${specialization}`} // Опис для асистивних технологій\r\n          >\r\n            {specialization}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SpecializationList;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"doctor\":\"DoctorList_doctor__IXVFr\",\"doctor__title\":\"DoctorList_doctor__title__TFtEM\",\"doctor__list\":\"DoctorList_doctor__list__mgqIL\",\"doctor__item\":\"DoctorList_doctor__item__7I8YR\",\"browser\":\"DoctorList_browser__XLumu\",\"browser_active\":\"DoctorList_browser_active__hSBtY\",\"doctor__item_active\":\"DoctorList_doctor__item_active__hk4v9\"};","// Імпорт необхідних модулів і бібліотек\r\nimport { useContext, useState } from 'react';\r\nimport classNames from 'classnames';\r\nimport s from './DoctorList.module.scss';\r\nimport { UserIdContext } from '../../../context/context';\r\n\r\n// Компонент DoctorList для вибору лікаря за спеціалізацією\r\nfunction DoctorList({ doctors, handleClickDoctor, selectedSpecialization }) {\r\n  const [activeDoctor, setActiveDoctor] = useState(null); // Стан для активного лікаря\r\n  const userId = useContext(UserIdContext); // Отримання userId з контексту\r\n\r\n  // Функція для обробки вибору лікаря\r\n  const onClickDoctor = (doctor) => {\r\n    setActiveDoctor(doctor._id); // Встановлення активного лікаря\r\n    handleClickDoctor(doctor); // Виклик функції для обробки вибору лікаря\r\n  };\r\n\r\n  // Класи для елемента лікаря\r\n  const itemClass = classNames(s.doctor__item, {\r\n    [s.browser]: !userId, // Додається клас, якщо userId відсутній\r\n  });\r\n\r\n  return (\r\n    <div className={s.doctor}>\r\n      <h2 tabIndex={0} className={s.doctor__title}>\r\n        Лікарі за спеціалізацією {selectedSpecialization}\r\n      </h2>\r\n      <ul className={s.doctor__list}>\r\n        {doctors.map(doctor => (\r\n          <li\r\n            key={doctor._id} // Унікальний ключ для кожного елемента списку\r\n            onClick={() => onClickDoctor(doctor)} // Обробка кліку на лікаря\r\n            onKeyDown={(e) => {\r\n              if (e.key === 'Enter' || e.key === ' ') {\r\n                e.preventDefault(); // Запобігання стандартному дії\r\n                onClickDoctor(doctor); // Виклик функції вибору лікаря\r\n              }\r\n            }}\r\n            tabIndex={0} // Додає можливість фокусування\r\n            role=\"button\" // Встановлює роль елемента\r\n            className={classNames(itemClass, {\r\n              [s.doctor__item_active]: doctor._id === activeDoctor, // Клас для активного лікаря\r\n              [s.browser_active]: doctor._id === activeDoctor, // Клас для активного лікаря в браузері\r\n            })}\r\n            aria-pressed={doctor._id === activeDoctor} // Додаткова інформація про стан\r\n            aria-label={`Оберіть лікаря ${doctor.name}`} // Опис дії для assistive technologies\r\n          >\r\n            {doctor.name} {/* Відображення імені лікаря */}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DoctorList;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"date\":\"DateList_date__e9QRv\",\"date__title\":\"DateList_date__title__MNe5I\",\"date__list\":\"DateList_date__list__Ycceu\",\"date__item\":\"DateList_date__item__PKmRf\",\"browser\":\"DateList_browser__yc88s\",\"browser_active\":\"DateList_browser_active__uUmdf\",\"date__item_active\":\"DateList_date__item_active__ipfJI\"};","// Імпорт необхідних модулів і бібліотек\r\nimport { useContext, useState } from 'react';\r\nimport classNames from 'classnames';\r\nimport s from './DateList.module.scss';\r\nimport { UserIdContext } from './../../../context/context';\r\n\r\n// Компонент DateList для вибору доступних дат\r\nfunction DateList({ availableDates, handleSelectDate, selectedDoctor }) {\r\n  const [activeDate, setActiveDate] = useState(null); // Стан для активної дати\r\n  const userId = useContext(UserIdContext); // Отримання userId з контексту\r\n\r\n  // Функція для обробки вибору дати\r\n  const onClickDate = (date) => {\r\n    setActiveDate(date); // Встановлення активної дати\r\n    handleSelectDate(date); // Виклик функції для обробки вибору дати\r\n  };\r\n\r\n  // Класи для елемента дати\r\n  let itemClass = classNames(s.date__item, {\r\n    [s.browser]: !userId, // Додається клас, якщо userId відсутній\r\n  });\r\n\r\n  return (\r\n    <div className={s.date}>\r\n      <h2 tabIndex={0} className={s.date__title}>\r\n        Доступні дати прийому лікаря {selectedDoctor.name}\r\n      </h2>\r\n      <ul className={s.date__list}>\r\n        {availableDates.map(slot => (\r\n          <li\r\n            key={slot.day} // Унікальний ключ для кожного елемента списку\r\n            onClick={() => onClickDate(slot.day)} // Обробка кліку на дату\r\n            onKeyDown={(e) => {\r\n              if (e.key === 'Enter' || e.key === ' ') {\r\n                e.preventDefault(); // Запобігання стандартному дії\r\n                onClickDate(slot.day); // Виклик функції вибору дати\r\n              }\r\n            }}\r\n            tabIndex={0} // Додає можливість фокусування\r\n            role=\"button\" // Встановлює роль елемента\r\n            className={classNames(itemClass, {\r\n              [s.date__item_active]: slot.day === activeDate, // Клас для активної дати\r\n              [s.browser_active]: slot.day === activeDate, // Клас для активної дати в браузері\r\n            })}\r\n            aria-pressed={slot.day === activeDate} // Додаткова інформація про стан\r\n            aria-label={`Оберіть дату ${slot.day}`} // Опис дії для assistive technologies\r\n          >\r\n            {slot.day} {/* Відображення дати */}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DateList;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"time\":\"TimeSlotList_time__e1Tyu\",\"time__title\":\"TimeSlotList_time__title__B7Pok\",\"time__list\":\"TimeSlotList_time__list__ZH0tu\",\"time__item\":\"TimeSlotList_time__item__ZLEVQ\",\"browser\":\"TimeSlotList_browser__3U+ey\",\"browser_active\":\"TimeSlotList_browser_active__ZRgxZ\",\"time__item_active\":\"TimeSlotList_time__item_active__OjAvE\"};","// Імпорт необхідних модулів і бібліотек\r\nimport { useContext, useState } from 'react';\r\nimport s from './TimeSlotList.module.scss';\r\nimport cn from 'classnames';\r\nimport { UserIdContext } from './../../../context/context';\r\n\r\n// Компонент TimeSlotList для вибору доступних часових слотів\r\nfunction TimeSlotList({ availableSlots, handleSelectSlot, selectedDate }) {\r\n  const [activeSlot, setActiveSlot] = useState(null); // Стан для збереження активного слоту\r\n  const userId = useContext(UserIdContext); // Отримання userId з контексту\r\n\r\n  // Функція для обробки вибору часового слоту\r\n  const onClickSlot = (slot) => {\r\n    setActiveSlot(slot); // Оновлення активного слоту\r\n    handleSelectSlot(slot); // Виклик функції для обробки вибору\r\n  };\r\n\r\n  // Класи для елемента списку часових слотів\r\n  const itemClass = cn(s.time__item, {\r\n    [s.browser]: !userId, // Додаток класу, якщо userId відсутній\r\n  });\r\n\r\n  return (\r\n    <div className={s.time}>\r\n      <h2 tabIndex={0} className={s.time__title}>Доступні часи прийому {selectedDate}</h2>\r\n      <ul className={s.time__list}>\r\n        {availableSlots.map(slot => (\r\n          <li\r\n            key={slot.time}\r\n            onClick={() => onClickSlot(slot.time)} // Обробка кліку\r\n            onKeyDown={(e) => {\r\n              if (e.key === 'Enter' || e.key === ' ') {\r\n                e.preventDefault(); // Запобігання стандартної поведінки\r\n                onClickSlot(slot.time); // Обробка клавіатурного вводу\r\n              }\r\n            }}\r\n            tabIndex={0} \r\n            role=\"button\" \r\n            className={cn(itemClass, {\r\n              [s.time__item_active]: slot.time === activeSlot, // Додаток класу для активного слоту\r\n              [s.browser_active]: slot.time === activeSlot,\r\n            })}\r\n            aria-pressed={slot.time === activeSlot} // Додаткова інформація про активність\r\n            aria-label={`Оберіть час ${slot.time}`} // Опис для асистивних технологій\r\n          >\r\n            {slot.time}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TimeSlotList;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"registration\":\"Registration_registration__Na6ip\",\"registration__button\":\"Registration_registration__button__zf4Bj\"};","// Імпорт необхідних модулів і бібліотек\r\nimport { useCallback, useContext, useEffect, useState } from 'react';\r\nimport { UserIdContext } from '../../context/context';\r\nimport { registrationAPI } from '../../api/registration-api';\r\nimport PatientInfo from './PatientInfo/PatientInfo';\r\nimport SpecializationList from './SpecializationList/SpecializationList';\r\nimport DoctorList from './DoctorList/DoctorList';\r\nimport DateList from './DateList/DateList';\r\nimport TimeSlotList from './TimeSlotList/TimeSlotList';\r\nimport { useTelegram } from '../../hooks/useTelegram';\r\nimport { Toast } from '../common/Toast/Toast'; \r\nimport s from './Registration.module.scss'\r\n\r\nfunction Registration() {\r\n  // Отримання Telegram API\r\n  const { tg, onReady, showMainButton, hideMainButton, setButtonText, setEventMainButtonClicked, removeEventMainButtonClicked, sendDataToTelegram } = useTelegram();\r\n\r\n  // Стани для зберігання даних\r\n  const [specializations, setSpecializations] = useState([]);\r\n  const [doctors, setDoctors] = useState([]);\r\n  const [selectedSpecialization, setSelectedSpecialization] = useState(null);\r\n  const [selectedDoctor, setSelectedDoctor] = useState(null);\r\n  const [availableDates, setAvailableDates] = useState([]);\r\n  const [selectedDate, setSelectedDate] = useState(null);\r\n  const [availableSlots, setAvailableSlots] = useState([]);\r\n  const [selectedSlot, setSelectedSlot] = useState(null);\r\n  const [patientName, setPatientName] = useState('');\r\n  const [patientPhone, setPatientPhone] = useState('');\r\n  const [isDataEntered, setIsDataEntered] = useState(false);\r\n  const [isFormValid, setIsFormValid] = useState(false); \r\n  const [errorMessage, setErrorMessage] = useState('');  \r\n\r\n  // Отримання userId з контексту\r\n  let userId = useContext(UserIdContext);\r\n\r\n  // Функція для відправки даних\r\n  const onSendData = useCallback(async () => {\r\n    const currentUserId = userId ? Number(userId) : null;\r\n\r\n    // Формування даних для відправки\r\n    const data = {\r\n      doctor: selectedDoctor.name,\r\n      doctor_id: selectedDoctor?.telegram_id,\r\n      specialization: selectedSpecialization,\r\n      date: selectedDate,\r\n      time: selectedSlot,\r\n      user_id: currentUserId,\r\n      patient_name: patientName,\r\n      patient_phone_number: Number(patientPhone),\r\n    };\r\n\r\n    // Повідомлення для лікаря\r\n    const messageForDoctor =         \r\n  `\r\n  ✍️ У вас новий запис на прийом:\r\n\r\n  👨‍🦱 Пацієнт: ${data.patient_name}\r\n  📞 Номер телефону: ${data.patient_phone_number}\r\n  📅 Дата: ${data.date}\r\n  ⏰ Час: ${data.time}\r\n  `;\r\n\r\n    try {\r\n      // Додавання запису\r\n      await registrationAPI.addRecord(data);\r\n\r\n      if (userId) {\r\n        // Відправка даних до Telegram\r\n        sendDataToTelegram(data);\r\n      } else {\r\n        if (data.doctor_id) {\r\n          try {\r\n            // Відправка повідомлення лікарю\r\n            await registrationAPI.sendMessageToDoctor(data.doctor_id, messageForDoctor);\r\n          } catch (error) {\r\n            console.error('Помилка при відправленні повідомлення лікарю:', error);\r\n          }\r\n        }\r\n        alert('Ви успішно записалися на прийом');\r\n      }\r\n      resetForm();\r\n\r\n    } catch (error) {\r\n      if (userId) {\r\n        setErrorMessage('Помилка при записі на прийом. Спробуйте знову');\r\n      } else {\r\n        alert('Помилка при записі на прийом. Спробуйте знову');\r\n      }\r\n      resetForm();\r\n    }\r\n  }, [selectedDoctor, selectedSpecialization, selectedSlot, selectedDate, patientName, patientPhone, userId, sendDataToTelegram]);\r\n\r\n  // Скидання форми\r\n  const resetForm = () => {\r\n    setDoctors([]);\r\n    setSelectedSpecialization(null);\r\n    setSelectedDoctor(null);\r\n    setAvailableDates([]);\r\n    setSelectedDate(null);\r\n    setAvailableSlots([]);\r\n    setSelectedSlot(null);\r\n    setPatientName('');\r\n    setPatientPhone('');\r\n    setIsDataEntered(false);\r\n    setIsFormValid(false); \r\n  };\r\n\r\n  // Обробка вводу даних пацієнта\r\n  const handleDataInput = useCallback(() => {\r\n    const phoneRegex = /^380\\d{9}$/; \r\n    if (patientName.trim() !== '' && phoneRegex.test(patientPhone)) {\r\n      setIsFormValid(true);\r\n    } else {\r\n      setIsFormValid(false);\r\n    }\r\n    setIsDataEntered(true);\r\n  }, [patientName, patientPhone]);\r\n\r\n  // Виклик при готовності Telegram\r\n  useEffect(() => {\r\n    onReady();\r\n    setEventMainButtonClicked(onSendData);\r\n    return () => {\r\n      removeEventMainButtonClicked(onSendData);\r\n    };\r\n  }, [onSendData, onReady, tg, setEventMainButtonClicked, removeEventMainButtonClicked]);\r\n\r\n  // Обробка натискання клавіші Enter\r\n  const handleKeyDown = useCallback((event) => {\r\n    if (event.key === 'Enter') {\r\n      if (userId && selectedSlot && isFormValid) {\r\n        onSendData(); \r\n      }\r\n    }\r\n  }, [onSendData, isFormValid, selectedSlot, userId]);\r\n\r\n  // Завантаження спеціалізацій лікарів\r\n  useEffect(() => {\r\n    onReady();\r\n    registrationAPI.getSpecializations().then(setSpecializations).catch(error => {\r\n      setErrorMessage('Помилка під час завантаження спеціалізацій лікарів');\r\n    });\r\n  }, [tg, onReady]);\r\n\r\n  // Встановлення тексту кнопки\r\n  useEffect(() => {\r\n    setButtonText('Записатися');\r\n  }, [tg, setButtonText]);\r\n\r\n  // Показ/сховування основної кнопки\r\n  useEffect(() => {\r\n    if (selectedSlot && isFormValid) {\r\n      showMainButton();\r\n    } else {\r\n      hideMainButton();\r\n    }\r\n  }, [selectedSlot, showMainButton, hideMainButton, isFormValid]);\r\n\r\n  // Обробка вибору спеціалізації\r\n  const handleClickSpecialization = (specialization) => {\r\n    if (isDataEntered) {\r\n      setSelectedSpecialization(specialization);\r\n      setSelectedDoctor(null);\r\n      setAvailableDates([]);\r\n      setSelectedDate(null);\r\n      setSelectedSlot(null);\r\n      registrationAPI.getDoctors(specialization).then(setDoctors).catch(error => {\r\n        setErrorMessage('Помилка при завантаженні лікарів за цією спеціалізацією');\r\n      });\r\n    }\r\n  };\r\n\r\n  // Обробка вибору лікаря\r\n  const handleClickDoctor = (doctor) => {\r\n    setSelectedDoctor(doctor);\r\n    setSelectedDate(null);\r\n    setSelectedSlot(null);\r\n    registrationAPI.getSchedule(doctor._id).then(response => {\r\n      const availableDates = response.filter(day => day.time_slots.some(slot => slot.is_available));\r\n      setAvailableDates(availableDates);\r\n    }).catch(error => {\r\n      setErrorMessage('Помилка під час завантаження розкладу лікаря');\r\n    });\r\n  };\r\n\r\n  // Обробка вибору дати\r\n  const handleSelectDate = (date) => {\r\n    setSelectedDate(date);\r\n    setSelectedSlot(null);\r\n    const selectedDay = availableDates.find(day => day.day === date);\r\n    if (selectedDay) {\r\n      const availableSlots = selectedDay.time_slots.filter(slot => slot.is_available);\r\n      setAvailableSlots(availableSlots);\r\n    }\r\n  };\r\n\r\n  // Обробка вибору слоту\r\n  const handleSelectSlot = (slot) => {\r\n    setSelectedSlot(slot);\r\n  };\r\n\r\n  // Показ повідомлення про помилку\r\n  useEffect(() => {\r\n    if (errorMessage) {\r\n      const timer = setTimeout(() => {\r\n        setErrorMessage(''); \r\n      }, 3000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [errorMessage]);\r\n\r\n  return (\r\n    <div className={s.registration} onKeyDown={handleKeyDown}>\r\n      <PatientInfo\r\n        patientName={patientName}\r\n        setPatientName={setPatientName}\r\n        patientPhone={patientPhone}\r\n        setPatientPhone={setPatientPhone}\r\n        handleDataInput={handleDataInput}\r\n      />\r\n      <SpecializationList\r\n        specializations={specializations}\r\n        handleClickSpecialization={handleClickSpecialization}\r\n      />\r\n      {selectedSpecialization && (\r\n        <DoctorList\r\n          doctors={doctors}\r\n          handleClickDoctor={handleClickDoctor}\r\n          selectedSpecialization={selectedSpecialization}\r\n        />\r\n      )}\r\n      {availableDates.length > 0 && selectedDoctor && (\r\n        <DateList\r\n          availableDates={availableDates}\r\n          handleSelectDate={handleSelectDate}\r\n          selectedDoctor={selectedDoctor}\r\n        />\r\n      )}\r\n      {availableSlots.length > 0 && selectedDate && (\r\n        <TimeSlotList\r\n          availableSlots={availableSlots}\r\n          handleSelectSlot={handleSelectSlot}\r\n          selectedDate={selectedDate}\r\n        />\r\n      )}\r\n      {!userId && selectedSlot && isFormValid &&             \r\n        <button\r\n          className={s.registration__button}\r\n          type=\"button\"\r\n          onClick={onSendData}\r\n          aria-label=\"Записатися на прийом\"\r\n          disabled={!isFormValid}\r\n        >\r\n          Записатися\r\n        </button>\r\n      }\r\n      {errorMessage && <Toast message={errorMessage} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Registration;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"toast\":\"Toast_toast__RH58L\",\"open\":\"Toast_open__B2TW5\"};","// Імпорт необхідних модулів і бібліотек\r\nimport { useEffect, useState } from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport cn from 'classnames';\r\nimport s from './Toast.module.scss';\r\n\r\n// Компонент для відображення спливаючого повідомлення Toast\r\nexport const Toast = ({ errorMessage }) => {\r\n  // Стан для зберігання часу у секундах\r\n  const [seconds, setSeconds] = useState(0);\r\n\r\n  // Базовий клас для Toast\r\n  let toastClass = cn(s.toast);\r\n\r\n  // Додаємо клас відкритого стану, якщо seconds більше 0\r\n  if (seconds > 0) {\r\n    toastClass = cn(s.toast, {\r\n      [s.open]: true, // Додається клас для відкритого стану\r\n    });\r\n  }\r\n\r\n  // Закриваємо Toast, якщо seconds досягає 2.7\r\n  if (seconds >= 2.7) {\r\n    toastClass = cn(s.toast, {\r\n      [s.open]: false, // Клас для закритого стану\r\n    });\r\n  }\r\n\r\n  // Використовуємо useEffect для оновлення seconds кожні 300 мілісекунд\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setSeconds(prevSeconds => prevSeconds + 0.3); // Додаємо 0.3 кожні 300 мс\r\n    }, 300);\r\n\r\n    // Зупиняємо інтервал при розмонтуванні компонента\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [setSeconds]);\r\n\r\n  // Якщо seconds досягне 3, повертаємо null, щоб не відображати Toast\r\n  if (seconds >= 3) return null;\r\n\r\n  // Повертаємо портал з Toast повідомленням, яке з'являється в document.body\r\n  return createPortal(\r\n    <div className={toastClass}>\r\n      <span>{errorMessage}</span>\r\n    </div>,\r\n    document.body,\r\n  );\r\n};\r\n"],"names":["instance","axios","create","baseURL","registrationAPI","addRecord","data","post","then","response","sendMessageToDoctor","chat_id","text","getSpecializations","get","getDoctors","specialization","getSchedule","doctorId","_ref","patientName","setPatientName","patientPhone","setPatientPhone","handleDataInput","isNameValid","setIsNameValid","useState","isPhoneValid","setIsPhoneValid","userId","useContext","UserIdContext","validateName","useCallback","trim","validatePhone","test","useEffect","blockClass","cn","s","info__block","browser","_jsxs","className","info","children","_jsx","tabIndex","info__title","placeholder","type","value","onChange","e","target","onBlur","required","id","error","specializations","handleClickSpecialization","activeSpecialization","setActiveSpecialization","onClickSpecialization","itemClass","map","onClick","onKeyDown","key","preventDefault","role","doctors","handleClickDoctor","selectedSpecialization","activeDoctor","setActiveDoctor","onClickDoctor","doctor","_id","classNames","name","availableDates","handleSelectDate","selectedDoctor","activeDate","setActiveDate","onClickDate","date","slot","day","availableSlots","handleSelectSlot","selectedDate","activeSlot","setActiveSlot","onClickSlot","time","tg","onReady","showMainButton","hideMainButton","setButtonText","setEventMainButtonClicked","removeEventMainButtonClicked","sendDataToTelegram","useTelegram","setSpecializations","setDoctors","setSelectedSpecialization","setSelectedDoctor","setAvailableDates","setSelectedDate","setAvailableSlots","selectedSlot","setSelectedSlot","isDataEntered","setIsDataEntered","isFormValid","setIsFormValid","errorMessage","setErrorMessage","onSendData","async","currentUserId","Number","doctor_id","telegram_id","user_id","patient_name","patient_phone_number","messageForDoctor","console","alert","resetForm","handleKeyDown","event","catch","timer","setTimeout","clearTimeout","PatientInfo","SpecializationList","DoctorList","filter","time_slots","some","is_available","length","DateList","selectedDay","find","TimeSlotList","disabled","Toast","message","seconds","setSeconds","toastClass","interval","setInterval","prevSeconds","clearInterval","createPortal","document","body"],"sourceRoot":""}