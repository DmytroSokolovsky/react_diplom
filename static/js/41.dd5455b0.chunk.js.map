{"version":3,"file":"static/js/41.dd5455b0.chunk.js","mappings":"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","sources":["api/api.js","api/registration-api.js","webpack://ui/./src/components/Registration/PatientInfo/PatientInfo.module.scss?0586","components/Registration/PatientInfo/PatientInfo.jsx","webpack://ui/./src/components/Registration/SpecializationList/SpecializationList.module.scss?ea99","components/Registration/SpecializationList/SpecializationList.jsx","webpack://ui/./src/components/Registration/DoctorList/DoctorList.module.scss?b99a","components/Registration/DoctorList/DoctorList.jsx","webpack://ui/./src/components/Registration/DateList/DateList.module.scss?ed81","components/Registration/DateList/DateList.jsx","webpack://ui/./src/components/Registration/TimeSlotList/TimeSlotList.module.scss?33f7","components/Registration/TimeSlotList/TimeSlotList.jsx","webpack://ui/./src/components/Registration/Registration.module.scss?ed51","components/Registration/Registration.jsx","webpack://ui/./src/components/common/Toast/Toast.module.scss?a9e2","components/common/Toast/Toast.jsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n  baseURL: 'https://api-diplom-eupy.onrender.com/api/'\r\n});","import axios from \"axios\";\r\nimport { instance } from \"./api\";\r\n\r\nconst TELEGRAM_BOT_TOKEN = '7528553042:AAH--t6VitbS4Su4pDKKsODm1UWkzqnQdMo';\r\nconst TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;\r\n\r\nexport const registrationAPI = {\r\n  addRecord(data) {\r\n    return instance\r\n      .post(`records`, data)\r\n      .then(response => response.data);\r\n  },\r\n  sendMessageToDoctor(chat_id, text) {\r\n    return axios.post(TELEGRAM_API_URL, {\r\n      chat_id, \r\n      text\r\n    });\r\n  },\r\n  getSpecializations() {\r\n    return instance\r\n      .get(`doctors/specializations/all`)\r\n      .then(response => response.data);\r\n  },\r\n  getDoctors(specialization) {\r\n    return instance\r\n      .get(`doctors/${specialization}`)\r\n      .then(response => response.data);\r\n  },\r\n  getSchedule(doctorId) {\r\n    return instance\r\n      .get(`doctor/${doctorId}/schedule`)\r\n      .then(response => response.data);\r\n  },\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"info__title\":\"PatientInfo_info__title__aPGKO\",\"info__block\":\"PatientInfo_info__block__szHwK\",\"browser\":\"PatientInfo_browser__NlEsI\"};","import { useContext, useEffect, useState } from 'react';\r\nimport s from './PatientInfo.module.scss';\r\nimport cn from 'classnames'\r\nimport { UserIdContext } from '../../../context/context';\r\n\r\nfunction PatientInfo({ patientName, setPatientName, patientPhone, setPatientPhone, handleDataInput }) {\r\n  const [isNameValid, setIsNameValid] = useState(true);\r\n  const [isPhoneValid, setIsPhoneValid] = useState(true);\r\n\r\n  const userId = useContext(UserIdContext);\r\n\r\n  const validateName = () => {\r\n    setIsNameValid(patientName.trim() !== '');\r\n  };\r\n\r\n  const validatePhone = () => {\r\n    const phoneRegex = /^380\\d{9}$/;\r\n    setIsPhoneValid(phoneRegex.test(patientPhone));\r\n  };\r\n\r\n  useEffect(() => {\r\n    validateName();\r\n    validatePhone();\r\n    handleDataInput();\r\n  }, [patientName, patientPhone, handleDataInput]);\r\n\r\n  const handleChangeName = (e) => {\r\n    setPatientName(e.target.value);\r\n  }\r\n\r\n  const handleChangePhone = (e) => {\r\n    setPatientPhone(e.target.value);\r\n  }\r\n\r\n  let blockClass = cn(s.info__block, {\r\n    [s.browser]: !userId,\r\n  });\r\n\r\n  return (\r\n    <div className={s.info}>\r\n      <h1 tabIndex={0} className={s.info__title}>Запис</h1>\r\n      <div className={blockClass}>\r\n        <label>\r\n          <span>ПІБ:</span>\r\n          <input\r\n            placeholder=\"ПІБ\"\r\n            type=\"text\"\r\n            value={patientName}\r\n            onChange={handleChangeName}\r\n            onBlur={validateName}\r\n            required\r\n          />\r\n          {!isNameValid && <p tabIndex={0}>Поле обов'язкове до заповнення</p>}\r\n        </label>\r\n      </div>\r\n      <div className={blockClass}>\r\n        <label>\r\n          <span>Номер телефону:</span>\r\n          <input\r\n            placeholder=\"Номер телефону\"\r\n            type=\"tel\"\r\n            value={patientPhone}\r\n            onChange={handleChangePhone}\r\n            onBlur={validatePhone} \r\n            required\r\n          />\r\n          {!isPhoneValid && <p tabIndex={0}>Формат повинен бути 380 ХХ ХХХХХХХ</p>}\r\n        </label>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PatientInfo;\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"specialization\":\"SpecializationList_specialization__HgJTZ\",\"specialization__title\":\"SpecializationList_specialization__title__+zARi\",\"specialization__list\":\"SpecializationList_specialization__list__HvYH5\",\"specialization__item\":\"SpecializationList_specialization__item__-b1zE\",\"browser\":\"SpecializationList_browser__br7Oa\",\"browser_active\":\"SpecializationList_browser_active__nyRx5\",\"specialization__item_active\":\"SpecializationList_specialization__item_active__+iQ9e\"};","import { useContext, useState } from 'react';\r\nimport cn from 'classnames';\r\nimport s from './SpecializationList.module.scss';\r\nimport { UserIdContext } from '../../../context/context';\r\n\r\nfunction SpecializationList({ specializations, handleClickSpecialization }) {\r\n  const [activeSpecialization, setActiveSpecialization] = useState(null);\r\n  const userId = useContext(UserIdContext);\r\n\r\n  const onClickSpecialization = (specialization) => {\r\n    setActiveSpecialization(specialization);\r\n    handleClickSpecialization(specialization);\r\n  };\r\n\r\n  let itemClass = cn(s.specialization__item, {\r\n    [s.browser]: !userId,\r\n  });\r\n\r\n  return (\r\n    <div className={s.specialization}>\r\n      <h2 tabIndex={0} className={s.specialization__title}>Оберіть спеціалізацію:</h2>\r\n      <ul className={s.specialization__list}>\r\n        {specializations.map((specialization, index) => (\r\n          <li\r\n            key={specialization}\r\n            onClick={() => onClickSpecialization(specialization)}\r\n            onKeyDown={(e) => {\r\n              if (e.key === 'Enter' || e.key === ' ') {\r\n                e.preventDefault();\r\n                onClickSpecialization(specialization);\r\n              }\r\n            }}\r\n            tabIndex={0} \r\n            role=\"button\" \r\n            className={cn(itemClass, {\r\n              [s.specialization__item_active]: specialization === activeSpecialization,\r\n              [s.browser_active]: specialization === activeSpecialization,\r\n            })}\r\n            aria-pressed={specialization === activeSpecialization} \r\n            aria-label={`Оберіть спеціалізацію ${specialization}`} \r\n          >\r\n            {specialization}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SpecializationList;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"doctor\":\"DoctorList_doctor__IXVFr\",\"doctor__title\":\"DoctorList_doctor__title__TFtEM\",\"doctor__list\":\"DoctorList_doctor__list__mgqIL\",\"doctor__item\":\"DoctorList_doctor__item__7I8YR\",\"browser\":\"DoctorList_browser__XLumu\",\"browser_active\":\"DoctorList_browser_active__hSBtY\",\"doctor__item_active\":\"DoctorList_doctor__item_active__hk4v9\"};","import { useContext, useState } from 'react';\r\nimport classNames from 'classnames';\r\nimport s from './DoctorList.module.scss';\r\nimport cn from 'classnames';\r\nimport { UserIdContext } from '../../../context/context';\r\n\r\nfunction DoctorList({ doctors, handleClickDoctor, selectedSpecialization }) {\r\n  const [activeDoctor, setActiveDoctor] = useState(null);\r\n  const userId = useContext(UserIdContext);\r\n\r\n  const onClickDoctor = (doctor) => {\r\n    setActiveDoctor(doctor._id);\r\n    handleClickDoctor(doctor);\r\n  };\r\n\r\n  let itemClass = cn(s.doctor__item, {\r\n    [s.browser]: !userId,\r\n  });\r\n\r\n  return (\r\n    <div className={s.doctor}>\r\n      <h2 tabIndex={0} className={s.doctor__title}>Лікарі за спеціалізацією {selectedSpecialization}</h2>\r\n      <ul className={s.doctor__list}>\r\n        {doctors.map(doctor => (\r\n          <li\r\n            key={doctor._id}\r\n            onClick={() => onClickDoctor(doctor)}\r\n            onKeyDown={(e) => {\r\n              if (e.key === 'Enter' || e.key === ' ') {\r\n                e.preventDefault();\r\n                onClickDoctor(doctor);\r\n              }\r\n            }}\r\n            tabIndex={0} \r\n            role=\"button\" \r\n            className={classNames(itemClass, {\r\n              [s.doctor__item_active]: doctor._id === activeDoctor,\r\n              [s.browser_active]: doctor._id === activeDoctor,\r\n            })}\r\n            aria-pressed={doctor._id === activeDoctor} \r\n            aria-label={`Оберіть лікаря ${doctor.name}`} \r\n          >\r\n            {doctor.name}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DoctorList;\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"date\":\"DateList_date__e9QRv\",\"date__title\":\"DateList_date__title__MNe5I\",\"date__list\":\"DateList_date__list__Ycceu\",\"date__item\":\"DateList_date__item__PKmRf\",\"browser\":\"DateList_browser__yc88s\",\"browser_active\":\"DateList_browser_active__uUmdf\",\"date__item_active\":\"DateList_date__item_active__ipfJI\"};","import { useContext, useState } from 'react';\r\nimport classNames from 'classnames';\r\nimport s from './DateList.module.scss';\r\nimport cn from 'classnames';\r\nimport { UserIdContext } from './../../../context/context';\r\n\r\nfunction DateList({ availableDates, handleSelectDate, selectedDoctor }) {\r\n  const [activeDate, setActiveDate] = useState(null);\r\n  const userId = useContext(UserIdContext);\r\n\r\n  const onClickDate = (date) => {\r\n    setActiveDate(date);\r\n    handleSelectDate(date);\r\n  };\r\n\r\n  let itemClass = cn(s.date__item, {\r\n    [s.browser]: !userId,\r\n  });\r\n\r\n  return (\r\n    <div className={s.date}>\r\n      <h2 tabIndex={0} className={s.date__title}>Доступні дати прийому лікаря {selectedDoctor.name}</h2>\r\n      <ul className={s.date__list}>\r\n        {availableDates.map(slot => (\r\n          <li\r\n            key={slot.day}\r\n            onClick={() => onClickDate(slot.day)}\r\n            onKeyDown={(e) => {\r\n              if (e.key === 'Enter' || e.key === ' ') {\r\n                e.preventDefault();\r\n                onClickDate(slot.day);\r\n              }\r\n            }}\r\n            tabIndex={0} \r\n            role=\"button\" \r\n            className={classNames(itemClass, {\r\n              [s.date__item_active]: slot.day === activeDate,\r\n              [s.browser_active]: slot.day === activeDate,\r\n            })}\r\n            aria-pressed={slot.day === activeDate} \r\n            aria-label={`Оберіть дату ${slot.day}`} \r\n          >\r\n            {slot.day}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DateList;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"time\":\"TimeSlotList_time__e1Tyu\",\"time__title\":\"TimeSlotList_time__title__B7Pok\",\"time__list\":\"TimeSlotList_time__list__ZH0tu\",\"time__item\":\"TimeSlotList_time__item__ZLEVQ\",\"browser\":\"TimeSlotList_browser__3U+ey\",\"browser_active\":\"TimeSlotList_browser_active__ZRgxZ\",\"time__item_active\":\"TimeSlotList_time__item_active__OjAvE\"};","import { useContext, useState } from 'react';\r\nimport s from './TimeSlotList.module.scss';\r\nimport cn from 'classnames';\r\nimport { UserIdContext } from './../../../context/context';\r\n\r\nfunction TimeSlotList({ availableSlots, handleSelectSlot, selectedDate }) {\r\n  const [activeSlot, setActiveSlot] = useState(null);\r\n  const userId = useContext(UserIdContext);\r\n\r\n  const onClickSlot = (slot) => {\r\n    setActiveSlot(slot);\r\n    handleSelectSlot(slot);\r\n  };\r\n\r\n  let itemClass = cn(s.time__item, {\r\n    [s.browser]: !userId,\r\n  });\r\n\r\n  return (\r\n    <div className={s.time}>\r\n      <h2 tabIndex={0} className={s.time__title}>Доступні часи прийому {selectedDate}</h2>\r\n      <ul className={s.time__list}>\r\n        {availableSlots.map(slot => (\r\n          <li\r\n            key={slot.time}\r\n            onClick={() => onClickSlot(slot.time)}\r\n            onKeyDown={(e) => {\r\n              if (e.key === 'Enter' || e.key === ' ') {\r\n                e.preventDefault();\r\n                onClickSlot(slot.time);\r\n              }\r\n            }}\r\n            tabIndex={0} \r\n            role=\"button\" \r\n            className={cn(itemClass, {\r\n              [s.time__item_active]: slot.time === activeSlot,\r\n              [s.browser_active]: slot.time === activeSlot,\r\n            })}\r\n            aria-pressed={slot.time === activeSlot} \r\n            aria-label={`Оберіть час ${slot.time}`} \r\n          >\r\n            {slot.time}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TimeSlotList;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"registration\":\"Registration_registration__Na6ip\",\"registration__button\":\"Registration_registration__button__zf4Bj\"};","import { useCallback, useContext, useEffect, useState } from 'react';\r\nimport { UserIdContext } from '../../context/context';\r\nimport { registrationAPI } from '../../api/registration-api';\r\nimport PatientInfo from './PatientInfo/PatientInfo';\r\nimport SpecializationList from './SpecializationList/SpecializationList';\r\nimport DoctorList from './DoctorList/DoctorList';\r\nimport DateList from './DateList/DateList';\r\nimport TimeSlotList from './TimeSlotList/TimeSlotList';\r\nimport { useTelegram } from '../../hooks/useTelegram';\r\nimport { Toast } from '../common/Toast/Toast'; \r\nimport s from './Registration.module.scss'\r\n\r\nfunction Registration() {\r\n  const { tg, onReady, showMainButton, hideMainButton, setButtonText, setEventMainButtonClicked, removeEventMainButtonClicked, sendDataToTelegram } = useTelegram();\r\n\r\n  const [specializations, setSpecializations] = useState([]);\r\n  const [doctors, setDoctors] = useState([]);\r\n  const [selectedSpecialization, setSelectedSpecialization] = useState(null);\r\n  const [selectedDoctor, setSelectedDoctor] = useState(null);\r\n  const [availableDates, setAvailableDates] = useState([]);\r\n  const [selectedDate, setSelectedDate] = useState(null);\r\n  const [availableSlots, setAvailableSlots] = useState([]);\r\n  const [selectedSlot, setSelectedSlot] = useState(null);\r\n  const [patientName, setPatientName] = useState('');\r\n  const [patientPhone, setPatientPhone] = useState('');\r\n  const [isDataEntered, setIsDataEntered] = useState(false);\r\n  const [isFormValid, setIsFormValid] = useState(false); \r\n  const [errorMessage, setErrorMessage] = useState('');  \r\n\r\n  let userId = useContext(UserIdContext);\r\n\r\n  const onSendData = useCallback(async () => {\r\n    if (userId) {\r\n      userId = Number(userId);\r\n    }\r\n\r\n    const data = {\r\n      doctor: selectedDoctor.name,\r\n      doctor_id: selectedDoctor?.telegram_id,\r\n      specialization: selectedSpecialization,\r\n      date: selectedDate,\r\n      time: selectedSlot,\r\n      user_id: userId,\r\n      patient_name: patientName,\r\n      patient_phone_number: Number(patientPhone),\r\n    };\r\n\r\n    const messageForDoctor =         \r\n  `\r\n  ✍️ У вас новий запис на прийом:\r\n\r\n  👨‍🦱 Пацієнт: ${data.patient_name}\r\n  📞 Номер телефону: ${data.patient_phone_number}\r\n  📅 Дата: ${data.date}\r\n  ⏰ Час: ${data.time}\r\n  `;\r\n\r\n    try {\r\n      await registrationAPI.addRecord(data);\r\n\r\n      if (userId) {\r\n        sendDataToTelegram(data);\r\n      } else {\r\n        if (data.doctor_id) {\r\n          try {\r\n            await registrationAPI.sendMessageToDoctor(data.doctor_id, messageForDoctor);\r\n          } catch (error) {\r\n            console.error('Помилка при відправленні повідомлення лікарю:', error);\r\n          }\r\n        }\r\n        alert('Ви успішно записалися на прийом');\r\n      }\r\n      resetForm();\r\n\r\n    } catch (error) {\r\n      if (userId) {\r\n        setErrorMessage('Помилка при записі на прийом. Спробуйте знову');\r\n      } else {\r\n        alert('Помилка при записі на прийом. Спробуйте знову');\r\n      }\r\n      resetForm();\r\n    }\r\n  }, [selectedDoctor, selectedSpecialization, selectedSlot, selectedDate, patientName, patientPhone, userId, sendDataToTelegram, tg, isFormValid]);\r\n\r\n\r\n  const resetForm = () => {\r\n    setDoctors([]);\r\n    setSelectedSpecialization(null);\r\n    setSelectedDoctor(null);\r\n    setAvailableDates([]);\r\n    setSelectedDate(null);\r\n    setAvailableSlots([]);\r\n    setSelectedSlot(null);\r\n    setPatientName('');\r\n    setPatientPhone('');\r\n    setIsDataEntered(false);\r\n    setIsFormValid(false); \r\n  };\r\n\r\n  const handleDataInput = useCallback(() => {\r\n    const phoneRegex = /^380\\d{9}$/; \r\n    if (patientName.trim() !== '' && phoneRegex.test(patientPhone)) {\r\n      setIsFormValid(true);\r\n    } else {\r\n      setIsFormValid(false);\r\n    }\r\n    setIsDataEntered(true);\r\n  }, [patientName, patientPhone]);\r\n\r\n  useEffect(() => {\r\n    onReady();\r\n    setEventMainButtonClicked(onSendData);\r\n    return () => {\r\n      removeEventMainButtonClicked(onSendData);\r\n    };\r\n  }, [onSendData, onReady, tg, setEventMainButtonClicked, removeEventMainButtonClicked]);\r\n\r\n  const handleKeyDown = useCallback((event) => {\r\n    if (event.key === 'Enter') {\r\n      if (userId && selectedSlot && isFormValid) {\r\n        onSendData(); \r\n      }\r\n    }\r\n  }, [onSendData, isFormValid, selectedSlot, userId]);\r\n\r\n  useEffect(() => {\r\n    onReady();\r\n    registrationAPI.getSpecializations().then(setSpecializations).catch(error => {\r\n      setErrorMessage('Помилка під час завантаження спеціалізацій лікарів');\r\n    });\r\n  }, [tg, onReady]);\r\n\r\n  useEffect(() => {\r\n    setButtonText('Записатися');\r\n  }, [tg, setButtonText]);\r\n\r\n  useEffect(() => {\r\n    if (selectedSlot && isFormValid) {\r\n      showMainButton();\r\n    } else {\r\n      hideMainButton();\r\n    }\r\n  }, [selectedSlot, showMainButton, hideMainButton, isFormValid]);\r\n\r\n  const handleClickSpecialization = (specialization) => {\r\n    if (isDataEntered) {\r\n      setSelectedSpecialization(specialization);\r\n      setSelectedDoctor(null);\r\n      setAvailableDates([]);\r\n      setSelectedDate(null);\r\n      setSelectedSlot(null);\r\n      registrationAPI.getDoctors(specialization).then(setDoctors).catch(error => {\r\n        setErrorMessage('Помилка при завантаженні лікарів за цією спеціалізацією');\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleClickDoctor = (doctor) => {\r\n    setSelectedDoctor(doctor);\r\n    setSelectedDate(null);\r\n    setSelectedSlot(null);\r\n    registrationAPI.getSchedule(doctor._id).then(response => {\r\n      const availableDates = response.filter(day => day.time_slots.some(slot => slot.is_available));\r\n      setAvailableDates(availableDates);\r\n    }).catch(error => {\r\n      setErrorMessage('Помилка під час завантаження розкладу лікаря');\r\n    });\r\n  };\r\n\r\n  const handleSelectDate = (date) => {\r\n    setSelectedDate(date);\r\n    setSelectedSlot(null);\r\n    const selectedDay = availableDates.find(day => day.day === date);\r\n    if (selectedDay) {\r\n      const availableSlots = selectedDay.time_slots.filter(slot => slot.is_available);\r\n      setAvailableSlots(availableSlots);\r\n    }\r\n  };\r\n\r\n  const handleSelectSlot = (slot) => {\r\n    setSelectedSlot(slot);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (errorMessage) {\r\n      const timer = setTimeout(() => {\r\n        setErrorMessage(''); \r\n      }, 3000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [errorMessage]);\r\n\r\n  return (\r\n    <div className={s.registration} onKeyDown={handleKeyDown}>\r\n      <PatientInfo\r\n        patientName={patientName}\r\n        setPatientName={setPatientName}\r\n        patientPhone={patientPhone}\r\n        setPatientPhone={setPatientPhone}\r\n        handleDataInput={handleDataInput}\r\n      />\r\n      <SpecializationList\r\n        specializations={specializations}\r\n        handleClickSpecialization={handleClickSpecialization}\r\n      />\r\n      {selectedSpecialization && (\r\n        <DoctorList\r\n          doctors={doctors}\r\n          handleClickDoctor={handleClickDoctor}\r\n          selectedSpecialization={selectedSpecialization}\r\n        />\r\n      )}\r\n      {availableDates.length > 0 && selectedDoctor && (\r\n        <DateList\r\n          availableDates={availableDates}\r\n          handleSelectDate={handleSelectDate}\r\n          selectedDoctor={selectedDoctor}\r\n        />\r\n      )}\r\n      {availableSlots.length > 0 && selectedDate && (\r\n        <TimeSlotList\r\n          availableSlots={availableSlots}\r\n          handleSelectSlot={handleSelectSlot}\r\n          selectedDate={selectedDate}\r\n        />\r\n      )}\r\n      {!userId && selectedSlot && isFormValid &&             \r\n        <button\r\n          className={s.registration__button}\r\n          type=\"button\"\r\n          onClick={onSendData}\r\n          aria-label=\"Записатися на прийом\"\r\n          disabled={!isFormValid}\r\n        >\r\n        Записатися\r\n        </button>\r\n      }\r\n      {errorMessage && <Toast errorMessage={errorMessage} />} \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Registration;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"toast\":\"Toast_toast__RH58L\",\"open\":\"Toast_open__B2TW5\"};","import { useEffect, useState } from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport cn from 'classnames';\r\nimport s from './Toast.module.scss';\r\n\r\nexport const Toast = ({ errorMessage }) => {\r\n  const [seconds, setSeconds] = useState(0);\r\n\r\n  let toastClass = cn(s.toast);\r\n\r\n  if (seconds > 0) {\r\n    toastClass = cn(s.toast, {\r\n      [s.open]: true,\r\n    });\r\n  }\r\n\r\n  if (seconds >= 2.7) {\r\n    toastClass = cn(s.toast, {\r\n      [s.open]: false,\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setSeconds(prevSeconds => prevSeconds + 0.3);\r\n    }, 300);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [setSeconds]);\r\n\r\n  if (seconds >= 3) return null;\r\n\r\n  return createPortal(\r\n    <div className={toastClass}>\r\n      <span>{errorMessage}</span>\r\n    </div>,\r\n    document.body,\r\n  );\r\n};"],"names":["instance","axios","create","baseURL","registrationAPI","addRecord","data","post","then","response","sendMessageToDoctor","chat_id","text","getSpecializations","get","getDoctors","specialization","getSchedule","doctorId","_ref","patientName","setPatientName","patientPhone","setPatientPhone","handleDataInput","isNameValid","setIsNameValid","useState","isPhoneValid","setIsPhoneValid","userId","useContext","UserIdContext","validateName","trim","validatePhone","test","useEffect","blockClass","cn","s","info__block","browser","_jsxs","className","info","children","_jsx","tabIndex","info__title","placeholder","type","value","onChange","e","target","onBlur","required","specializations","handleClickSpecialization","activeSpecialization","setActiveSpecialization","onClickSpecialization","itemClass","map","index","onClick","onKeyDown","key","preventDefault","role","doctors","handleClickDoctor","selectedSpecialization","activeDoctor","setActiveDoctor","onClickDoctor","doctor","_id","classNames","name","availableDates","handleSelectDate","selectedDoctor","activeDate","setActiveDate","onClickDate","date","slot","day","availableSlots","handleSelectSlot","selectedDate","activeSlot","setActiveSlot","onClickSlot","time","tg","onReady","showMainButton","hideMainButton","setButtonText","setEventMainButtonClicked","removeEventMainButtonClicked","sendDataToTelegram","useTelegram","setSpecializations","setDoctors","setSelectedSpecialization","setSelectedDoctor","setAvailableDates","setSelectedDate","setAvailableSlots","selectedSlot","setSelectedSlot","isDataEntered","setIsDataEntered","isFormValid","setIsFormValid","errorMessage","setErrorMessage","onSendData","useCallback","async","Number","doctor_id","telegram_id","user_id","patient_name","patient_phone_number","messageForDoctor","error","console","alert","resetForm","handleKeyDown","event","catch","timer","setTimeout","clearTimeout","PatientInfo","SpecializationList","DoctorList","filter","time_slots","some","is_available","length","DateList","selectedDay","find","TimeSlotList","disabled","Toast","seconds","setSeconds","toastClass","interval","setInterval","prevSeconds","clearInterval","createPortal","document","body"],"sourceRoot":""}